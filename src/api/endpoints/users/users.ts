/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Vahana API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  APIResponseAdminReferrerResponseDto,
  APIResponseAdminReponseUserDto,
  APIResponseAdminReservationResponseDto,
  APIResponseBoolean,
  APIResponseForbiddenDto,
  APIResponseLatestReservationResponseDto,
  APIResponseReferrerResponseWithLimitDto,
  APIResponseReservationDetailResponseDto,
  APIResponseReservationResponseDto,
  APIResponseReserveResponse,
  APIResponseTicketResponseDto,
  APIResponseUnauthorizedDto,
  APIResponseUserResponseDto,
  CreateReservationDto,
  GetApiUsersIdReservationsParams,
  InviteUserDto,
  PostApiUsersIdInviteHeaders,
  UpdateUserDto,
  VerifyIdentityDto,
} from "../../model";
import { customAxios } from "../../mutator/customAxios";

/**
 * 유저 정보 조회
 * @summary 유저 정보 조회
 */
export const getApiUsersId = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseUserResponseDto>({
    url: `/api/users/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdQueryKey = (id: string) => {
  return [`/api/users/${id}`] as const;
};

export const getGetApiUsersIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiUsersIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersId>>> = ({
    signal,
  }) => getApiUsersId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersId>>
>;
export type GetApiUsersIdQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersId>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 유저 정보 조회
 */

export function useGetApiUsersId<
  TData = Awaited<ReturnType<typeof getApiUsersId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiUsersId>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 초대 코드 발송. 초대 링크는 https://front/signup?referrer={referrer} 형식으로 진행
 * @summary 초대 코드 발송
 */
export const postApiUsersIdInvite = (
  id: string,
  inviteUserDto: InviteUserDto,
  headers: PostApiUsersIdInviteHeaders,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/users/${id}/invite`,
    method: "POST",
    headers: { "Content-Type": "application/json", ...headers },
    data: inviteUserDto,
    signal,
  });
};

export const getPostApiUsersIdInviteMutationOptions = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdInvite>>,
    TError,
    { id: string; data: InviteUserDto; headers: PostApiUsersIdInviteHeaders },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersIdInvite>>,
  TError,
  { id: string; data: InviteUserDto; headers: PostApiUsersIdInviteHeaders },
  TContext
> => {
  const mutationKey = ["postApiUsersIdInvite"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersIdInvite>>,
    { id: string; data: InviteUserDto; headers: PostApiUsersIdInviteHeaders }
  > = (props) => {
    const { id, data, headers } = props ?? {};

    return postApiUsersIdInvite(id, data, headers);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersIdInviteMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersIdInvite>>
>;
export type PostApiUsersIdInviteMutationBody = InviteUserDto;
export type PostApiUsersIdInviteMutationError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

/**
 * @summary 초대 코드 발송
 */
export const usePostApiUsersIdInvite = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdInvite>>,
    TError,
    { id: string; data: InviteUserDto; headers: PostApiUsersIdInviteHeaders },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersIdInvite>>,
  TError,
  { id: string; data: InviteUserDto; headers: PostApiUsersIdInviteHeaders },
  TContext
> => {
  const mutationOptions = getPostApiUsersIdInviteMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 추천인 조회 / referee는 피추천인, referrer는 추천인
 * @summary 추천인 조회
 */
export const getApiUsersIdReferrer = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseReferrerResponseWithLimitDto>({
    url: `/api/users/${id}/referrer`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdReferrerQueryKey = (id: string) => {
  return [`/api/users/${id}/referrer`] as const;
};

export const getGetApiUsersIdReferrerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdReferrerQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReferrer>>
  > = ({ signal }) => getApiUsersIdReferrer(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersIdReferrerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReferrer>>
>;
export type GetApiUsersIdReferrerQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReferrer>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReferrer>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 추천인 조회
 */

export function useGetApiUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReferrer>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersIdReferrerQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [어드민] 티켓 조회
 * @summary [어드민] 티켓 조회
 */
export const getApiUsersIdTickets = (id: string, signal?: AbortSignal) => {
  return customAxios<APIResponseTicketResponseDto>({
    url: `/api/users/${id}/tickets`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdTicketsQueryKey = (id: string) => {
  return [`/api/users/${id}/tickets`] as const;
};

export const getGetApiUsersIdTicketsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdTickets>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdTicketsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdTickets>>
  > = ({ signal }) => getApiUsersIdTickets(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdTickets>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersIdTicketsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdTickets>>
>;
export type GetApiUsersIdTicketsQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiUsersIdTickets<
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdTickets>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdTickets>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdTickets>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdTickets<
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdTickets>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdTickets>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdTickets>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdTickets<
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdTickets>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [어드민] 티켓 조회
 */

export function useGetApiUsersIdTickets<
  TData = Awaited<ReturnType<typeof getApiUsersIdTickets>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdTickets>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersIdTicketsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 예약 내역 조회
 * @summary 예약 내역 조회
 */
export const getApiUsersIdReservations = (
  id: string,
  params: GetApiUsersIdReservationsParams,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseReservationResponseDto>({
    url: `/api/users/${id}/reservations`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiUsersIdReservationsQueryKey = (
  id: string,
  params: GetApiUsersIdReservationsParams,
) => {
  return [
    `/api/users/${id}/reservations`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiUsersIdReservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdReservationsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReservations>>
  > = ({ signal }) => getApiUsersIdReservations(id, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReservations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersIdReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReservations>>
>;
export type GetApiUsersIdReservationsQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReservations>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReservations>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReservations>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReservations>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 예약 내역 조회
 */

export function useGetApiUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  params: GetApiUsersIdReservationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersIdReservationsQueryOptions(
    id,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 예약 추가
 * @summary 예약 추가
 */
export const postApiUsersIdReservations = (
  id: string,
  createReservationDto: CreateReservationDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseReserveResponse>({
    url: `/api/users/${id}/reservations`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createReservationDto,
    signal,
  });
};

export const getPostApiUsersIdReservationsMutationOptions = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdReservations>>,
    TError,
    { id: string; data: CreateReservationDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersIdReservations>>,
  TError,
  { id: string; data: CreateReservationDto },
  TContext
> => {
  const mutationKey = ["postApiUsersIdReservations"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersIdReservations>>,
    { id: string; data: CreateReservationDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiUsersIdReservations(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersIdReservationsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersIdReservations>>
>;
export type PostApiUsersIdReservationsMutationBody = CreateReservationDto;
export type PostApiUsersIdReservationsMutationError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

/**
 * @summary 예약 추가
 */
export const usePostApiUsersIdReservations = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdReservations>>,
    TError,
    { id: string; data: CreateReservationDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersIdReservations>>,
  TError,
  { id: string; data: CreateReservationDto },
  TContext
> => {
  const mutationOptions = getPostApiUsersIdReservationsMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 신원 인증
 * @summary 신원 인증
 */
export const postApiUsersIdIdentity = (
  id: string,
  verifyIdentityDto: VerifyIdentityDto,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/users/${id}/identity`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: verifyIdentityDto,
    signal,
  });
};

export const getPostApiUsersIdIdentityMutationOptions = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdIdentity>>,
    TError,
    { id: string; data: VerifyIdentityDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiUsersIdIdentity>>,
  TError,
  { id: string; data: VerifyIdentityDto },
  TContext
> => {
  const mutationKey = ["postApiUsersIdIdentity"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiUsersIdIdentity>>,
    { id: string; data: VerifyIdentityDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return postApiUsersIdIdentity(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiUsersIdIdentityMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiUsersIdIdentity>>
>;
export type PostApiUsersIdIdentityMutationBody = VerifyIdentityDto;
export type PostApiUsersIdIdentityMutationError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

/**
 * @summary 신원 인증
 */
export const usePostApiUsersIdIdentity = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiUsersIdIdentity>>,
    TError,
    { id: string; data: VerifyIdentityDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiUsersIdIdentity>>,
  TError,
  { id: string; data: VerifyIdentityDto },
  TContext
> => {
  const mutationOptions = getPostApiUsersIdIdentityMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * 최근 예약 내역 1개 조회
 * @summary 최근 예약 내역 조회
 */
export const getApiUsersIdReservationsLatest = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseLatestReservationResponseDto>({
    url: `/api/users/${id}/reservations/latest`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdReservationsLatestQueryKey = (id: string) => {
  return [`/api/users/${id}/reservations/latest`] as const;
};

export const getGetApiUsersIdReservationsLatestQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiUsersIdReservationsLatestQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>
  > = ({ signal }) => getApiUsersIdReservationsLatest(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersIdReservationsLatestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>
>;
export type GetApiUsersIdReservationsLatestQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiUsersIdReservationsLatest<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReservationsLatest<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReservationsLatest<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 최근 예약 내역 조회
 */

export function useGetApiUsersIdReservationsLatest<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsLatest>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersIdReservationsLatestQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 예약 상세 내역 조회
 * @summary 예약 상세 내역 조회
 */
export const getApiUsersIdReservationsReservationId = (
  id: string,
  reservationId: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseReservationDetailResponseDto>({
    url: `/api/users/${id}/reservations/${reservationId}`,
    method: "GET",
    signal,
  });
};

export const getGetApiUsersIdReservationsReservationIdQueryKey = (
  id: string,
  reservationId: string,
) => {
  return [`/api/users/${id}/reservations/${reservationId}`] as const;
};

export const getGetApiUsersIdReservationsReservationIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  reservationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiUsersIdReservationsReservationIdQueryKey(id, reservationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>
  > = ({ signal }) =>
    getApiUsersIdReservationsReservationId(id, reservationId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(id && reservationId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiUsersIdReservationsReservationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>
>;
export type GetApiUsersIdReservationsReservationIdQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiUsersIdReservationsReservationId<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  reservationId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReservationsReservationId<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  reservationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiUsersIdReservationsReservationId<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  reservationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary 예약 상세 내역 조회
 */

export function useGetApiUsersIdReservationsReservationId<
  TData = Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  reservationId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiUsersIdReservationsReservationId>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiUsersIdReservationsReservationIdQueryOptions(
    id,
    reservationId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [어드민] 유저 목록 조회
 * @summary [어드민] 유저 목록 조회
 */
export const getApiAdminUsers = (signal?: AbortSignal) => {
  return customAxios<APIResponseAdminReponseUserDto>({
    url: `/api/admin/users`,
    method: "GET",
    signal,
  });
};

export const getGetApiAdminUsersQueryKey = () => {
  return [`/api/admin/users`] as const;
};

export const getGetApiAdminUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUsers>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiAdminUsersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUsers>>
  > = ({ signal }) => getApiAdminUsers(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAdminUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUsers>>
>;
export type GetApiAdminUsersQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiAdminUsers<
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUsers>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiAdminUsers>>,
        TError,
        Awaited<ReturnType<typeof getApiAdminUsers>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAdminUsers<
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUsers>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiAdminUsers>>,
        TError,
        Awaited<ReturnType<typeof getApiAdminUsers>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAdminUsers<
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUsers>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [어드민] 유저 목록 조회
 */

export function useGetApiAdminUsers<
  TData = Awaited<ReturnType<typeof getApiAdminUsers>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiAdminUsers>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAdminUsersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [어드민] 유저 정보 수정
 * @summary [어드민] 유저 정보 수정
 */
export const patchApiAdminUsersId = (
  id: string,
  updateUserDto: UpdateUserDto,
) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/admin/users/${id}`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateUserDto,
  });
};

export const getPatchApiAdminUsersIdMutationOptions = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiAdminUsersId>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof patchApiAdminUsersId>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationKey = ["patchApiAdminUsersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof patchApiAdminUsersId>>,
    { id: string; data: UpdateUserDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return patchApiAdminUsersId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PatchApiAdminUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof patchApiAdminUsersId>>
>;
export type PatchApiAdminUsersIdMutationBody = UpdateUserDto;
export type PatchApiAdminUsersIdMutationError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

/**
 * @summary [어드민] 유저 정보 수정
 */
export const usePatchApiAdminUsersId = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof patchApiAdminUsersId>>,
    TError,
    { id: string; data: UpdateUserDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof patchApiAdminUsersId>>,
  TError,
  { id: string; data: UpdateUserDto },
  TContext
> => {
  const mutationOptions = getPatchApiAdminUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * [어드민] 유저 삭제
 * @summary [어드민] 유저 삭제
 */
export const deleteApiAdminUsersId = (id: string) => {
  return customAxios<APIResponseBoolean>({
    url: `/api/admin/users/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiAdminUsersIdMutationOptions = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiAdminUsersId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiAdminUsersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteApiAdminUsersId"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiAdminUsersId>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiAdminUsersId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiAdminUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiAdminUsersId>>
>;

export type DeleteApiAdminUsersIdMutationError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

/**
 * @summary [어드민] 유저 삭제
 */
export const useDeleteApiAdminUsersId = <
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiAdminUsersId>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiAdminUsersId>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteApiAdminUsersIdMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * [어드민] 추천인 조회
 * @summary [어드민] 추천인 조회
 */
export const getApiAdminUsersIdReferrer = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseAdminReferrerResponseDto>({
    url: `/api/admin/users/${id}/referrer`,
    method: "GET",
    signal,
  });
};

export const getGetApiAdminUsersIdReferrerQueryKey = (id: string) => {
  return [`/api/admin/users/${id}/referrer`] as const;
};

export const getGetApiAdminUsersIdReferrerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAdminUsersIdReferrerQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>
  > = ({ signal }) => getApiAdminUsersIdReferrer(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAdminUsersIdReferrerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>
>;
export type GetApiAdminUsersIdReferrerQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiAdminUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAdminUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAdminUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [어드민] 추천인 조회
 */

export function useGetApiAdminUsersIdReferrer<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReferrer>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAdminUsersIdReferrerQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * [어드민] 운행 횟수 조회
 * @summary [어드민] 운행 횟수 조회
 */
export const getApiAdminUsersIdReservations = (
  id: string,
  signal?: AbortSignal,
) => {
  return customAxios<APIResponseAdminReservationResponseDto>({
    url: `/api/admin/users/${id}/reservations`,
    method: "GET",
    signal,
  });
};

export const getGetApiAdminUsersIdReservationsQueryKey = (id: string) => {
  return [`/api/admin/users/${id}/reservations`] as const;
};

export const getGetApiAdminUsersIdReservationsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiAdminUsersIdReservationsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>
  > = ({ signal }) => getApiAdminUsersIdReservations(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiAdminUsersIdReservationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>
>;
export type GetApiAdminUsersIdReservationsQueryError =
  | APIResponseUnauthorizedDto
  | APIResponseForbiddenDto;

export function useGetApiAdminUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>
        >,
        "initialData"
      >;
  },
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAdminUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
          TError,
          Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>
        >,
        "initialData"
      >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiAdminUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary [어드민] 운행 횟수 조회
 */

export function useGetApiAdminUsersIdReservations<
  TData = Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
  TError = APIResponseUnauthorizedDto | APIResponseForbiddenDto,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiAdminUsersIdReservations>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiAdminUsersIdReservationsQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
