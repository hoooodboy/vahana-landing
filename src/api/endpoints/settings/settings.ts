/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Vahana API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { CreateSettingDto } from "../../model";
import { customAxios } from "../../mutator/customAxios";

export const postApiSettings = (
  createSettingDto: CreateSettingDto,
  signal?: AbortSignal,
) => {
  return customAxios<void>({
    url: `/api/settings`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createSettingDto,
    signal,
  });
};

export const getPostApiSettingsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSettings>>,
    TError,
    { data: CreateSettingDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiSettings>>,
  TError,
  { data: CreateSettingDto },
  TContext
> => {
  const mutationKey = ["postApiSettings"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiSettings>>,
    { data: CreateSettingDto }
  > = (props) => {
    const { data } = props ?? {};

    return postApiSettings(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiSettingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiSettings>>
>;
export type PostApiSettingsMutationBody = CreateSettingDto;
export type PostApiSettingsMutationError = unknown;

export const usePostApiSettings = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiSettings>>,
    TError,
    { data: CreateSettingDto },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiSettings>>,
  TError,
  { data: CreateSettingDto },
  TContext
> => {
  const mutationOptions = getPostApiSettingsMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getApiSettings = (signal?: AbortSignal) => {
  return customAxios<void>({ url: `/api/settings`, method: "GET", signal });
};

export const getGetApiSettingsQueryKey = () => {
  return [`/api/settings`] as const;
};

export const getGetApiSettingsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiSettings>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiSettings>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiSettingsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSettings>>> = ({
    signal,
  }) => getApiSettings(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiSettings>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetApiSettingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiSettings>>
>;
export type GetApiSettingsQueryError = unknown;

export function useGetApiSettings<
  TData = Awaited<ReturnType<typeof getApiSettings>>,
  TError = unknown,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiSettings>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiSettings>>,
        TError,
        Awaited<ReturnType<typeof getApiSettings>>
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSettings<
  TData = Awaited<ReturnType<typeof getApiSettings>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiSettings>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiSettings>>,
        TError,
        Awaited<ReturnType<typeof getApiSettings>>
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetApiSettings<
  TData = Awaited<ReturnType<typeof getApiSettings>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiSettings>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetApiSettings<
  TData = Awaited<ReturnType<typeof getApiSettings>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiSettings>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetApiSettingsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
